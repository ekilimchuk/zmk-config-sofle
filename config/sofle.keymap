/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE  &kp N1  &kp N2            &kp N3    &kp N4            &kp N5                           &kp N6  &kp N7             &kp N8     &kp N9             &kp N0    &kp BACKSPACE
&kp TAB     &kp Q   &kp W             &kp E     &kp R             &kp T                            &kp Y   &kp U              &kp I      &kp O              &kp P     &kp LEFT_BRACKET
&kp GRAVE   &kp A   &kp S             &kp D     &kp F             &kp G                            &kp H   &kp J              &kp K      &kp L              &kp SEMI  &kp SQT
&kp LSHFT   &kp Z   &kp X             &kp C     &kp V             &kp B   &kp C_PP     &kp C_MUTE  &kp N   &kp M              &kp COMMA  &kp DOT            &kp FSLH  &kp RSHFT
                    &kp LEFT_CONTROL  &kp LALT  &kp LEFT_COMMAND  &mo 1   &kp SPACE    &kp ENTER   &mo 2   &kp RIGHT_COMMAND  &kp RALT   &kp RIGHT_CONTROL
            >;

            sensor-bindings =
                <&inc_dec_kp PG_UP PG_DN>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                    &kp F6     &kp F7    &kp F8    &kp F9     &kp F10  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans                    &kp HOME   &trans    &trans    &trans     &trans   &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_UP  &trans    &kp UP    &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans   &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |       |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                |  <-  |   v  |   ^   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //              |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR  &kp PERCENT                    &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans        &trans        &trans      &trans                         &trans          &trans         &trans            &trans                &trans                 &kp DELETE
&trans  &kp K_MUTE       &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT                     &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp NON_US_BACKSLASH   &kp GRAVE
&trans  &kp TILDE        &trans        &trans        &trans      &kp C_PP     &trans    &trans  &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE               &kp TILDE
                         &trans        &trans        &trans      &trans       &trans    &trans  &trans          &trans         &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        layer_3 {
            bindings = <
&trans        &trans          &trans        &trans        &trans        &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans          &trans        &trans        &trans        &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        L3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
